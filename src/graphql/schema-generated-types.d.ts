/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FieldShieldResolver, ObjectTypeShieldResolver } from "nexus-shield"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateOnly<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    time<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Time";
    /**
     * Decimal scalar type. This type is used to transport comma separated values as strings
     */
    decimal<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Decimal";
    /**
     * JSON scalar type. This is a emergency-type when it is not feasible or possible to implement a graphql schema
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSON";
    /**
     * BigInt custom scalar type
     */
    bigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateOnly<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    time<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Time";
    /**
     * Decimal scalar type. This type is used to transport comma separated values as strings
     */
    decimal<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Decimal";
    /**
     * JSON scalar type. This is a emergency-type when it is not feasible or possible to implement a graphql schema
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
    /**
     * BigInt custom scalar type
     */
    bigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CoordinateInput: { // input type
    accuracy?: number | null; // Float
    altitude?: number | null; // Float
    latitude?: number | null; // Float
    lnglat?: string | null; // String
    longitude?: number | null; // Float
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
  Date: any
  DateTime: any
  Decimal: any
  JSON: any
  Time: any
}

export interface NexusGenObjects {
  Chain: { // root type
    chainId?: string | null; // String
    id?: string | null; // ID
    lastBalance?: number | null; // Int
    lastCheckAt?: NexusGenScalars['DateTime'] | null; // DateTime
    publicKey?: string | null; // String
  }
  Coordinate: { // root type
    accuracy?: number | null; // Float
    altitude?: number | null; // Float
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    latitude?: number | null; // Float
    lnglat?: string | null; // String
    longitude?: number | null; // Float
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  JSONResult: { // root type
    json?: NexusGenScalars['JSON'] | null; // JSON
  }
  Mutation: {};
  Query: {};
  User: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    disabled?: boolean | null; // Boolean
    email?: string | null; // String
    id?: string | null; // ID
    lastSignoutAt?: NexusGenScalars['DateTime'] | null; // DateTime
    phone?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Chain: { // field return type
    chainId: string | null; // String
    id: string | null; // ID
    lastBalance: number | null; // Int
    lastCheckAt: NexusGenScalars['DateTime'] | null; // DateTime
    publicKey: string | null; // String
  }
  Coordinate: { // field return type
    accuracy: number | null; // Float
    altitude: number | null; // Float
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    latitude: number | null; // Float
    lnglat: string | null; // String
    longitude: number | null; // Float
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  JSONResult: { // field return type
    json: NexusGenScalars['JSON'] | null; // JSON
  }
  Mutation: { // field return type
    addUserChain: NexusGenRootTypes['User'] | null; // User
    broadcastChainSignedTransaction: NexusGenRootTypes['JSONResult'] | null; // JSONResult
    refreshUserChains: NexusGenRootTypes['User'] | null; // User
    removeUserChain: NexusGenRootTypes['User'] | null; // User
    requestAccountNumberAndSequence: NexusGenRootTypes['JSONResult'] | null; // JSONResult
    updateUserEmail: NexusGenRootTypes['User'] | null; // User
    updateUserLocation: NexusGenRootTypes['User'] | null; // User
    updateUserName: NexusGenRootTypes['User'] | null; // User
    updateUserPassword: NexusGenRootTypes['User'] | null; // User
    updateUserPhone: NexusGenRootTypes['User'] | null; // User
    updateUserRoles: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    User: NexusGenRootTypes['User'] | null; // User
    branch: string | null; // String
    version: string | null; // String
  }
  User: { // field return type
    chains: Array<NexusGenRootTypes['Chain'] | null> | null; // [Chain]
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    disabled: boolean | null; // Boolean
    email: string | null; // String
    id: string | null; // ID
    lastSigninAt: NexusGenScalars['DateTime'] | null; // DateTime
    lastSignoutAt: NexusGenScalars['DateTime'] | null; // DateTime
    location: NexusGenRootTypes['Coordinate'] | null; // Coordinate
    name: string | null; // String
    phone: string | null; // String
    roles: Array<string | null> | null; // [String]
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
}

export interface NexusGenFieldTypeNames {
  Chain: { // field return type name
    chainId: 'String'
    id: 'ID'
    lastBalance: 'Int'
    lastCheckAt: 'DateTime'
    publicKey: 'String'
  }
  Coordinate: { // field return type name
    accuracy: 'Float'
    altitude: 'Float'
    createdAt: 'DateTime'
    latitude: 'Float'
    lnglat: 'String'
    longitude: 'Float'
    updatedAt: 'DateTime'
  }
  JSONResult: { // field return type name
    json: 'JSON'
  }
  Mutation: { // field return type name
    addUserChain: 'User'
    broadcastChainSignedTransaction: 'JSONResult'
    refreshUserChains: 'User'
    removeUserChain: 'User'
    requestAccountNumberAndSequence: 'JSONResult'
    updateUserEmail: 'User'
    updateUserLocation: 'User'
    updateUserName: 'User'
    updateUserPassword: 'User'
    updateUserPhone: 'User'
    updateUserRoles: 'User'
  }
  Query: { // field return type name
    User: 'User'
    branch: 'String'
    version: 'String'
  }
  User: { // field return type name
    chains: 'Chain'
    createdAt: 'DateTime'
    disabled: 'Boolean'
    email: 'String'
    id: 'ID'
    lastSigninAt: 'DateTime'
    lastSignoutAt: 'DateTime'
    location: 'Coordinate'
    name: 'String'
    phone: 'String'
    roles: 'String'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addUserChain: { // args
      chainId?: string | null; // String
      publicKey?: string | null; // String
    }
    broadcastChainSignedTransaction: { // args
      chainId: string; // String!
      signedTransactionBase64: string; // String!
    }
    refreshUserChains: { // args
      chainIdList?: Array<string | null> | null; // [String]
    }
    removeUserChain: { // args
      chainId?: string | null; // String
    }
    requestAccountNumberAndSequence: { // args
      chainId: string; // String!
      senderAddress: string; // String!
    }
    updateUserEmail: { // args
      email: string; // String!
    }
    updateUserLocation: { // args
      name: NexusGenInputs['CoordinateInput']; // CoordinateInput!
    }
    updateUserName: { // args
      name: string; // String!
    }
    updateUserPassword: { // args
      currentPassword: string; // String!
      password: string; // String!
    }
    updateUserPhone: { // args
      phone: string; // String!
    }
    updateUserRoles: { // args
      roles?: Array<string | null> | null; // [String]
    }
  }
  Query: {
    User: { // args
      email?: string | null; // String
      id?: string | null; // ID
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: false
    isTypeOf: true
    __typename: true
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Default authorization rule to execute on all fields of this object
     */
    shield?: ObjectTypeShieldResolver<TypeName>
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization rule to execute for this field
     */
    shield?: FieldShieldResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}